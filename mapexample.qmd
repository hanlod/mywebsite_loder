---
title: "Interactive Map Example"
author: "Hannah Loder"
format:
  html:
    self-contained: true
    code-fold: true
    code-tools: true

---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(tigris)
library(sf)
library(tidycensus)
library(htmltools)
library(janitor)
library(here)
library(mapview)
library(leafsync)
library(leaflet.extras2)
options(tigris_class = "sf")


```

# Interactive Maps with MapView Package


```{r}

# uncomment to run, then recomment it out so you don't run it every time

 census_api_key("2a6f8c21a30d3024e038d67d7d4eba647dc79cd4", install=TRUE, overwrite=TRUE)


```

```{r}
#variables I'm looking at
myvars <- c(totalpop = "B01003_001",
            medincome = "B19013_001",
            medage = "B01002_001"
)
```


```{r}
#pull for MO counties
mo_counties_withgeo <- get_acs(geography = "county",
                       variables = c(myvars),
                       state = "MO",
                       output = "wide",
                       geometry = TRUE)

mo_counties_withgeo
```

```{r}
#all counties in the US
all_counties_withgeo <- get_acs(geography = "county",
                       variables = c(myvars),
                       output = "wide",
                       geometry = TRUE)

all_counties_withgeo
```

```{r}
#remove MOE columns - they all end with "M"
mo_counties_withgeo <- mo_counties_withgeo %>%
  select(-ends_with("M"))

mo_counties_withgeo
```

```{r}
#remove that trailing "E"
colnames(mo_counties_withgeo) <- sub("E$", "", colnames(mo_counties_withgeo)) # $ means end of string only

mo_counties_withgeo
```

Mapping Missouri counties with mapview

```{r}

mapview(mo_counties_withgeo, zcol = "medincome")



```


Customize colors
```{r}

mapview(mo_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1)



```


Two maps together
```{r}

map_income <- mapview(mo_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1)

map_age <- mapview(mo_counties_withgeo, zcol = "medage", 
         col.regions = RColorBrewer::brewer.pal(9, "Greens"), 
         alpha.regions = 1)


```


```{r}

sync(map_income, map_age)


```

Side-by-side slider to compare the two, from the leaflet.extras2 package 
```{r}

map_income | map_age


```
Turning off legends, hover text, popups...


```{r}

mapview(mo_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1,
         legend = FALSE, 
         label = FALSE, 
         popup = FALSE)


```

My custom labels
```{r}

mylabel <- glue::glue("{mo_counties_withgeo$NAM} {mo_counties_withgeo$medincome}")


mapview(mo_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1,
         label = mylabel)

```

Customize popups
```{r}
mypopup <- glue::glue("<strong>{mo_counties_withgeo$NAM}</strong><br />
                      Total Population: {mo_counties_withgeo$totalpop}<br />
                      Median Income: {mo_counties_withgeo$medincome}") %>% 
  lapply(htmltools::HTML)


```


```{r}

head(mypopup)

```


```{r}

mapview(mo_counties_withgeo, zcol = "medincome", 
         col.regions = RColorBrewer::brewer.pal(9, "Blues"), 
         alpha.regions = 1,
         popup = mypopup, label = mylabel)

```
